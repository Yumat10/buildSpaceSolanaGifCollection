{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","preflightCommitment","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","useEffect","addEventListener","e","getProvider","connection","Connection","Provider","getGifList","provider","program","Program","account","fetch","createGifAccount","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","connectWallet","sendGif","length","addGif","className","onClick","type","placeholder","value","onChange","target","map","item","index","src","gifLink","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a9f5757.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.4844b78f.svg\";","import twitterLogo from \"./assets/twitter-logo.svg\";\r\nimport \"./App.css\";\r\nimport { useEffect, useState } from \"react\";\r\n// Key information to call Solana programs\r\nimport idl from \"./idl.json\";\r\n// Key pair generated to persist single base account accross all users\r\nimport kp from \"./keypair.json\";\r\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\r\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\r\n\r\n// Constants\r\nconst TWITTER_HANDLE = \"_buildspace\";\r\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\r\nconst TEST_GIFS = [\r\n  \"https://media0.giphy.com/media/jQ7tn8bSGEgPIQzRJL/giphy.gif?cid=ecf05e47nni0tf747x0xwd8idmufrfv0asm5y0jwac1g1hal&rid=giphy.gif&ct=g\",\r\n  \"https://media3.giphy.com/media/vbPzAifIrGycdxnvsO/giphy.gif?cid=ecf05e47nni0tf747x0xwd8idmufrfv0asm5y0jwac1g1hal&rid=giphy.gif&ct=g\",\r\n  \"https://media3.giphy.com/media/LS8xIl030F3dI8KJYN/giphy.gif?cid=ecf05e47nni0tf747x0xwd8idmufrfv0asm5y0jwac1g1hal&rid=giphy.gif&ct=g\",\r\n];\r\n\r\n// SystemProgram is a reference to the Solana runtime!\r\nconst { SystemProgram, Keypair } = web3;\r\n\r\n// Get the keypair for the account that holds the GIF data.\r\nconst arr = Object.values(kp._keypair.secretKey);\r\nconst secret = new Uint8Array(arr);\r\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\r\n\r\n// Get our program's id form the IDL file.\r\nconst programID = new PublicKey(idl.metadata.address);\r\n\r\n// Set our network to devent.\r\nconst network = clusterApiUrl(\"devnet\");\r\n\r\n// Control's how we want to acknowledge when a transaction is \"done\".\r\nconst opts = {\r\n  preflightCommitment: \"processed\",\r\n};\r\n\r\nconst App = () => {\r\n  const [walletAddress, setWalletAddress] = useState(null);\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [gifList, setGifList] = useState([]);\r\n\r\n  // Check if user has connected their phantom wallet\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { solana } = window;\r\n\r\n      if (solana && solana.isPhantom) {\r\n        console.log(\"Phantom wallet found!\");\r\n\r\n        const response = await solana.connect({ onlyIfTrusted: true });\r\n        console.log(\"response...\", response);\r\n\r\n        setWalletAddress(response.publicKey.toString());\r\n      } else {\r\n        alert(\"Solana object not found! Get a Phantom Wallet ðŸ‘»\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error in checkIfWalletIsConnected()...\", err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"load\", async (e) => {\r\n      await checkIfWalletIsConnected();\r\n    });\r\n  }, []);\r\n\r\n  // Get connection to solana\r\n  const getProvider = () => {\r\n    const connection = new Connection(network, opts.preflightCommitment);\r\n    const provider = new Provider(\r\n      connection,\r\n      window.solana,\r\n      opts.preflightCommitment\r\n    );\r\n    return provider;\r\n  };\r\n\r\n  // Get GIFs from Solana\r\n  const getGifList = async () => {\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n      const account = await program.account.baseAccount.fetch(\r\n        baseAccount.publicKey\r\n      );\r\n\r\n      console.log(\"Got the account\", account);\r\n      setGifList(account.gifList);\r\n    } catch (error) {\r\n      console.log(\"Error in getGifs: \", error);\r\n      setGifList(null);\r\n    }\r\n  };\r\n\r\n  // Get GIF account for Solana\r\n  const createGifAccount = async () => {\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n      console.log(\"ping\", opts);\r\n      await program.rpc.startStuffOff({\r\n        accounts: {\r\n          baseAccount: baseAccount.publicKey,\r\n          user: provider.wallet.publicKey,\r\n          systemProgram: SystemProgram.programId,\r\n        },\r\n        signers: [baseAccount],\r\n      });\r\n      console.log(\r\n        \"Created a new BaseAccount w/ address:\",\r\n        baseAccount.publicKey.toString()\r\n      );\r\n      await getGifList();\r\n    } catch (error) {\r\n      console.log(\"Error creating BaseAccount account:\", error);\r\n    }\r\n  };\r\n\r\n  // Load GIFs once a wallet is connected\r\n  useEffect(() => {\r\n    if (walletAddress) {\r\n      console.log(\"Fetching GIF list...\");\r\n      // Call Solana program here\r\n      getGifList();\r\n    }\r\n  }, [walletAddress]);\r\n\r\n  const connectWallet = async () => {\r\n    const { solana } = window;\r\n\r\n    if (solana) {\r\n      const response = await solana.connect();\r\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\r\n      setWalletAddress(response.publicKey.toString());\r\n    }\r\n  };\r\n\r\n  /*\r\n   * We want to render this UI when the user hasn't connected\r\n   * their wallet to our app yet.\r\n   */\r\n  const renderNotConnectedContainer = () => (\r\n    <button\r\n      className=\"cta-button connect-wallet-button\"\r\n      onClick={connectWallet}\r\n    >\r\n      Connect to Wallet\r\n    </button>\r\n  );\r\n\r\n  const sendGif = async () => {\r\n    if (inputValue.length === 0) {\r\n      console.log(\"No gif link given!\");\r\n      return;\r\n    }\r\n    console.log(\"Gif link:\", inputValue);\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n\r\n      await program.rpc.addGif(inputValue, {\r\n        accounts: {\r\n          baseAccount: baseAccount.publicKey,\r\n        },\r\n      });\r\n      console.log(\"GIF sucesfully sent to program\", inputValue);\r\n\r\n      await getGifList();\r\n    } catch (error) {\r\n      console.log(\"Error sending GIF:\", error);\r\n    }\r\n  };\r\n\r\n  const renderConnectedContainer = () => {\r\n    if (gifList === null) {\r\n      return (\r\n        <div className=\"connected-container\">\r\n          <button\r\n            className=\"cta-button submit-gif-button\"\r\n            onClick={createGifAccount}\r\n          >\r\n            Do One-Time Initialization For GIF Program Account\r\n          </button>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"connected-container\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter gif link!\"\r\n            value={inputValue}\r\n            onChange={(e) => setInputValue(e.target.value)}\r\n          />\r\n          <button className=\"cta-button submit-gif-button\" onClick={sendGif}>\r\n            Submit\r\n          </button>\r\n          <div className=\"gif-grid\">\r\n            {gifList.map((item, index) => (\r\n              <div className=\"gif-item\" key={index}>\r\n                <img src={item.gifLink} />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\r\n        <div className=\"header-container\">\r\n          <p className=\"header\">ðŸŽ­ Money Heist Portal</p>\r\n          <p className=\"sub-text\">\r\n            View your Money Heist collection in the metaverse âœ¨\r\n          </p>\r\n          {walletAddress\r\n            ? renderConnectedContainer()\r\n            : renderNotConnectedContainer()}\r\n        </div>\r\n        <div className=\"footer-container\">\r\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\r\n          <a\r\n            className=\"footer-text\"\r\n            href={TWITTER_LINK}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >{`built on @${TWITTER_HANDLE}`}</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}